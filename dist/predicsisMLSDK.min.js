angular.module("API.model").service("Datasets",function($q,apiRestangular,jobCompletion){function dataset(id){return apiRestangular.one("datasets",id)}function datasets(){return apiRestangular.all("datasets")}var self=this;this.create=function(params){return jobCompletion.wrapAsyncPromise(datasets().post({dataset:params}))},this.split=function(id,name,filename,sampling){sampling=sampling||70;var learn={parent_dataset_id:id,name:"learned_"+name,data_file:{filename:"learned_"+filename},sampling:sampling},test={parent_dataset_id:id,name:"tested_"+name,data_file:{filename:"tested_"+filename},sampling:-sampling};return $q.all([this.create(learn),this.create(test)])},this.all=function(ids){return void 0===ids?datasets().getList():(ids=ids||[],$q.all(ids.map(function(id){return dataset(id).get()})))},this.get=function(id){return dataset(id).get()},this.getChildren=function(id){return self.get(id).then(function(originalDataset){return self.all(originalDataset.children_dataset_ids)}).then(function(subsets){return subsets.reduce(function(memo,child){return child.sampling>0?memo.train=child:memo.test=child,memo},{})})},this.update=function(id,changes){return changes.separator&&"	"===changes.separator&&(changes.separator="\\t"),jobCompletion.wrapAsyncPromise(dataset(id).patch({dataset:changes}))},this["delete"]=function(id){return dataset(id).remove()}}),angular.module("API.model").service("Dictionaries",function($q,apiRestangular,jobCompletion){function dictionary(id){return apiRestangular.one("dictionaries",id)}function dictionaries(){return apiRestangular.all("dictionaries")}this.createFromDataset=function(dataset){return this.create({name:encodeURI("dictionary_"+dataset.name.toLowerCase()),dataset_id:dataset.id})},this.create=function(params){return jobCompletion.wrapAsyncPromise(dictionaries().post({dictionary:params}))},this.all=function(dictionaryIds){return void 0===dictionaryIds?dictionaries(dictionaryIds).getList():(dictionaryIds=dictionaryIds||[],$q.all(dictionaryIds.map(function(id){return dictionary(id).get()})))},this.get=function(dictionaryId){return dictionary(dictionaryId).get()},this.update=function(dictionaryId,changes){return jobCompletion.wrapAsyncPromise(dictionary(dictionaryId).patch({dictionary:changes}))},this["delete"]=function(dictionaryId){return dictionary(dictionaryId).remove()}}),angular.module("API.model").service("Jobs",function($q,apiRestangular){function job(id){return apiRestangular.one("jobs",id)}function jobs(){return apiRestangular.all("jobs")}this.all=function(jobIds){return void 0===jobIds?jobs(jobIds).getList():(jobIds=jobIds||[],$q.all(jobIds.map(function(id){return job(id).get()})))},this.get=function(jobId){return job(jobId).get()},this["delete"]=function(jobId){return job(jobId).remove()}}),angular.module("API.model").service("Modalities",function($q,apiRestangular,jobCompletion){function modality(id){return apiRestangular.one("modalities_sets",id)}function modalities(){return apiRestangular.all("modalities_sets")}this.create=function(params){return jobCompletion.wrapAsyncPromise(modalities().post({source:params}))},this.all=function(modalitiesSetIds){return void 0===modalitiesSetIds?modalities().getList():(modalitiesSetIds=modalitiesSetIds||[],$q.all(modalitiesSetIds.map(function(id){return modality(id).get()})))},this.get=function(id){return modality(id).get()},this["delete"]=function(id){return modality(id).remove()}}),angular.module("API.model").service("Models",function($q,apiRestangular,jobCompletion){function model(id){return apiRestangular.one("models",id)}function models(){return apiRestangular.all("models")}var self=this;this.createClassifier=function(preparationRulesSetId){return self.create({type:"classifier",preparation_rules_set_id:preparationRulesSetId})},this.create=function(params){return jobCompletion.wrapAsyncPromise(models().post({model:params}))},this.all=function(modelIds){return void 0===modelIds?models().getList():(modelIds=modelIds||[],$q.all(modelIds.map(function(id){return model(id).get()})))},this.get=function(id){return model(id).get()},this.update=function(id,changes){return jobCompletion.wrapAsyncPromise(model(id).patch({model:changes}))},this["delete"]=function(id){return model(id).remove()}}),angular.module("API.model").service("PreparationRules",function($q,apiRestangular,jobCompletion){function preparationRulesSet(id){return apiRestangular.one("preparation_rules_sets",id)}function preparationRulesSets(){return apiRestangular.all("preparation_rules_sets")}this.create=function(params){return jobCompletion.wrapAsyncPromise(preparationRulesSets().post({preparation_rules_set:params}))},this.all=function(preparationRulesSetIds){return void 0===preparationRulesSetIds?preparationRulesSets().getList():(preparationRulesSetIds=preparationRulesSetIds||[],$q.all(preparationRulesSetIds.map(function(id){return preparationRulesSet(id).get()})))},this.get=function(id){return preparationRulesSet(id).get()},this.update=function(id,changes){return jobCompletion.wrapAsyncPromise(preparationRulesSet(id).patch({preparation_rules_set:changes}))},this["delete"]=function(id){return preparationRulesSet(id).remove()}}),angular.module("API.model").service("Projects",function($q,apiRestangular){function project(id){return apiRestangular.one("projects",id)}function projects(){return apiRestangular.all("projects")}this.create=function(params){return projects().post({project:params})},this.all=function(projectIds){return void 0===projectIds?projects(projectIds).getList():(projectIds=projectIds||[],$q.all(projectIds.map(function(id){return project(id).get()})))},this.get=function(projectId){return project(projectId).get()},this.update=function(projectId,changes){return project(projectId).patch({project:changes})},this["delete"]=function(projectId){return project(projectId).remove()}}),angular.module("API.model").service("Reports",function($q,$injector,apiRestangular,jobCompletion){function createClassifierEvaluationReport(project,type){var Datasets=$injector.get("Datasets");return Datasets.getChildren(project.learning_dataset_id).then(function(children){return that.create({type:"classifier_evaluation",dataset_id:children[type].id,classifier_id:project.classifier_id,modalities_set_id:project.modalities_set_id,main_modality:project.main_modality})})}var that=this,report=function(id){return apiRestangular.one("reports",id)},reports=function(){return apiRestangular.all("reports")};this.createTrainClassifierEvaluationReport=function(project){return createClassifierEvaluationReport(project,"train")},this.createTestClassifierEvaluationReport=function(project){return createClassifierEvaluationReport(project,"test")},this.createUnivariateSupervisedReport=function(project){return that.create({type:"univariate_supervised",dataset_id:project.learning_dataset_id,dictionary_id:project.dictionary_id,variable_id:project.target_variable_id})},this.create=function(params){return jobCompletion.wrapAsyncPromise(reports().post({report:params}))},this.all=function(reportIds){return void 0===reportIds?reports(reportIds).getList():(reportIds=reportIds||[],$q.all(reportIds.map(function(id){return report(id).get()})))},this.get=function(reportId){return report(reportId).get()},this.update=function(reportId,changes){return jobCompletion.wrapAsyncPromise(report(reportId).patch({report:changes}))},this["delete"]=function(reportId){return report(reportId).remove()}}),angular.module("API.model").service("Sources",function($q,apiRestangular,jobCompletion){function source(id){return apiRestangular.one("sources",id)}function sources(){return apiRestangular.all("sources")}this.create=function(params){return jobCompletion.wrapAsyncPromise(sources().post({source:params}))},this.all=function(sourceIds){return void 0===sourceIds?sources().getList():(sourceIds=sourceIds||[],$q.all(sourceIds.map(function(id){return source(id).get()})))},this.get=function(sourceId){return source(sourceId).get()},this.update=function(sourceId,changes){return jobCompletion.wrapAsyncPromise(source(sourceId).patch({source:changes}))},this["delete"]=function(sourceId){return source(sourceId).remove()}}),angular.module("API.model").service("Uploads",function(apiRestangular){function credentials(storageService){return apiRestangular.all("sources").one("credentials",storageService)}this.getCredentials=function(storageService){return credentials(storageService).get()},this.sign=function(key){return credentials("s3",key).post({credentials:{key:key}})}}),angular.module("API.model").service("Users",function($q,apiRestangular){function user(id){return apiRestangular.one("users",id)}function users(){return apiRestangular.all("users")}function settings(){return apiRestangular.all("settings")}this.create=function(params){return users().post({user:params})},this.resetPassword=function(email,redirectUri){return users().all("password").post({user:{email:email,redirect_uri:redirectUri}})},this.getCurrentUser=function(){return user("me").get()},this.getSettings=function(){return settings().getList()},this.saveSettings=function(settings){return settings().patch({settings:changes})},this.update=function(id,changes){if("current_password"in changes&&"password"in changes){var password={current_password:changes.current_password,password:changes.password};return delete changes.current_password,delete changes.password,Object.keys(changes).length>0?$q.all({profile:user(id).patch({user:changes}),password:users().all("update_password").patch({user:password})}):users().all("update_password").patch({user:password})}return user(id).patch({user:changes})},this["delete"]=function(id){return user(id).remove()}}),angular.module("API.model").service("Variables",function($q,apiRestangular){function variable(dictionaryId,variableId){return apiRestangular.one("dictionaries",dictionaryId).one("variables",variableId)}function variables(dictionaryId){return apiRestangular.one("dictionaries",dictionaryId).all("variables")}this.all=function(dictionaryId,variablesIds){return void 0===variablesIds?variables(dictionaryId,variablesIds).getList():(variablesIds=variablesIds||[],$q.all(variablesIds.map(function(id){return variables(dictionaryId,id).get()})))},this.get=function(dictionaryId,variableId){return variable(dictionaryId,variableId).get()},this.update=function(dictionaryId,variableId,changes){return variable(dictionaryId,variableId).patch({variable:changes})}}),angular.module("API.model",[]);
//# sourceMappingURL=predicsisMLSDK.min.js.map